package com.vcampus.client.controller;

import com.vcampus.client.service.StudentAdminService;
import com.vcampus.common.dto.Message;
import com.vcampus.common.dto.Student;
import com.vcampus.common.dto.StudentLeaveApplication;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Popup;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class StudentAdminController implements IClientController {

    @FXML private TextField searchField;
    @FXML private Button searchButton;
    @FXML private TableView<Student> studentTable;
    @FXML private Button btnAdjustStatus;

    @FXML private TableColumn<Student, Boolean> colSelect;
    @FXML private TableColumn<Student, String> colUserId;
    @FXML private TableColumn<Student, String> colStudentId;
    @FXML private TableColumn<Student, String> colName;
    @FXML private TableColumn<Student, String> colGender;
    @FXML private TableColumn<Student, String> colCollege;
    @FXML private TableColumn<Student, String> colMajor;
    @FXML private TableColumn<Student, Integer> colGrade;
    @FXML private TableColumn<Student, String> colStudentStatus;
    @FXML private TableColumn<Student, Void> colAction;
    @FXML private Button btnSelectAll; // Êñ∞Â¢ûÔºöÂÖ®ÈÄâ/ÂÖ®‰∏çÈÄâÊåâÈíÆ
    @FXML private Button btnStudentList;       // Â≠¶ÁîüÂàóË°®
    @FXML private Button btnApplicationList;   // Áî≥ËØ∑ÂàóË°®
    @FXML private TableView<StudentLeaveApplication> applicationTable;
    @FXML private TableColumn<StudentLeaveApplication, String> colAppStudentId;
    @FXML private TableColumn<StudentLeaveApplication, String> colAppName;
    @FXML private TableColumn<StudentLeaveApplication, String> colAppReason;
    @FXML private TableColumn<StudentLeaveApplication, String> colAppStatus;
    @FXML private TableColumn<StudentLeaveApplication, Void> colAppAction;


    private final StudentAdminService studentAdminService = new StudentAdminService();
    private final ObservableList<Student> studentData = FXCollections.observableArrayList();
    private final FilteredList<Student> filteredData = new FilteredList<>(studentData, s -> true);
    private final ObservableList<StudentLeaveApplication> applicationData = FXCollections.observableArrayList();

    // Â≠òÂÇ®Á≠õÈÄâÈÄâÈ°π
    private final Set<String> selectedGrades = new HashSet<>();
    private final Set<String> selectedMajors = new HashSet<>();
    private final Set<String> selectedStatuses = new HashSet<>();
    private boolean allSelected = false; // ÂΩìÂâçÂÖ®ÈÄâÁä∂ÊÄÅ

    @FXML
    public void initialize() {
        registerToMessageController();

        // ÂàóÁªëÂÆö
        colUserId.setCellValueFactory(new PropertyValueFactory<>("userId"));
        colStudentId.setCellValueFactory(new PropertyValueFactory<>("studentId"));
        colName.setCellValueFactory(new PropertyValueFactory<>("name"));
        colGender.setCellValueFactory(new PropertyValueFactory<>("gender"));
        colCollege.setCellValueFactory(new PropertyValueFactory<>("college"));
        colMajor.setCellValueFactory(new PropertyValueFactory<>("major"));
        colGrade.setCellValueFactory(new PropertyValueFactory<>("grade"));
        colStudentStatus.setCellValueFactory(new PropertyValueFactory<>("student_status"));
        colAppStudentId.setCellValueFactory(new PropertyValueFactory<>("studentId"));
        colAppName.setCellValueFactory(new PropertyValueFactory<>("studentName"));
        colAppReason.setCellValueFactory(new PropertyValueFactory<>("reason"));
        colAppStatus.setCellValueFactory(new PropertyValueFactory<>("status"));

        // Ê∑ªÂä†Â§öÈÄâÁ≠õÈÄâÊåâÈíÆ
        addFilterToGradeColumn();
        addFilterToMajorColumn();
        addFilterToStudentStatusColumn();

        studentTable.setPlaceholder(new Label("ÊöÇÊó†Â≠¶ÁîüÊï∞ÊçÆ"));

        applicationTable.setItems(applicationData);
        applicationTable.setPlaceholder(new Label("ÊöÇÊó†Áî≥ËØ∑Êï∞ÊçÆ"));
        applicationTable.setVisible(false); // ÈªòËÆ§ÈöêËóè

        // Ëá™ÂÆö‰πâÂçïÂÖÉÊ†ºÊ∏≤Êüì
        colStudentStatus.setCellFactory(column -> new TableCell<Student, String>() {
            @Override
            protected void updateItem(String status, boolean empty) {
                super.updateItem(status, empty);
                if (empty || status == null) {
                    setText(null);
                    setStyle("");
                } else {
                    setText(status);
                    switch (status) {
                        case "Âú®ËØª" -> setStyle("-fx-text-fill: green; -fx-font-weight: bold;");
                        case "‰ºëÂ≠¶" -> setStyle("-fx-text-fill: orange; -fx-font-weight: bold;");
                        case "ÊØï‰∏ö" -> setStyle("-fx-text-fill: red; -fx-font-weight: bold;");
                        default -> setStyle("");
                    }
                }
            }
        });
        // Êìç‰ΩúÂàó
        colAction.setCellFactory(param -> new TableCell<Student, Void>() {
            private final Button btnDetail = new Button("Êü•ÁúãËØ¶ÁªÜ");
            private final Button btnEdit = new Button("‰øÆÊîπ");
            private final HBox box = new HBox(6, btnDetail, btnEdit);

            {
                btnDetail.getStyleClass().add("clear-button");
                btnEdit.getStyleClass().add("create-button");

                btnDetail.setOnAction(event -> {
                    int idx = getIndex();
                    if (idx < 0 || idx >= getTableView().getItems().size()) return;
                    Student student = getTableView().getItems().get(idx);
                    showStudentDetail(student);
                });

                btnEdit.setOnAction(event -> {
                    int idx = getIndex();
                    if (idx < 0 || idx >= getTableView().getItems().size()) return;
                    Student student = getTableView().getItems().get(idx);
                    showEditDialog(student);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                setGraphic(empty ? null : box);
            }
        });

        studentTable.setItems(filteredData);
        studentTable.getSelectionModel().setCellSelectionEnabled(false);
        studentTable.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        // ÊêúÁ¥¢ÊåâÈíÆ & ÂõûËΩ¶
        searchButton.setOnAction(event -> updateFilter());
        searchField.setOnAction(event -> updateFilter());

        btnSelectAll.getStyleClass().add("all-button");
        btnAdjustStatus.getStyleClass().add("status-button");
        btnStudentList.getStyleClass().add("studentlist-button");
        btnApplicationList.getStyleClass().add("applicationlist-button");
        // ÊâπÈáèÂ≠¶Á±çÁä∂ÊÄÅË∞ÉÊï¥
        btnAdjustStatus.setOnAction(e -> adjustSelectedStudentStatus());

        // Ê∑ªÂä†ÈÄâÊã©Âàó
        colSelect.setCellValueFactory(cellData -> cellData.getValue().selectedProperty());
        colSelect.setCellFactory(CheckBoxTableCell.forTableColumn(colSelect));
        colSelect.setEditable(true);
        studentTable.setEditable(true);

        // ÂÖ®ÈÄâ/ÂÖ®‰∏çÈÄâÊåâÈíÆÈÄªËæë
        btnSelectAll.setText("ÂÖ®ÈÄâ");
        btnSelectAll.setOnAction(e -> {
            allSelected = !allSelected;
            // ÂΩìÂâçÊòæÁ§∫ÁöÑÊï∞ÊçÆË°åÊâçÊìç‰Ωú
            filteredData.forEach(s -> s.setSelected(allSelected));
            btnSelectAll.setText(allSelected ? "ÂÖ®‰∏çÈÄâ" : "ÂÖ®ÈÄâ");
            studentTable.refresh();
        });
        btnStudentList.setOnAction(e -> {
            studentTable.setVisible(true);
            applicationTable.setVisible(false);
        });

        btnApplicationList.setOnAction(e -> {
            studentTable.setVisible(false);
            applicationTable.setVisible(true);
            loadAllApplications(); // Âä†ËΩΩÁî≥ËØ∑ÂàóË°®Êï∞ÊçÆ
        });
        loadAllStudent();
    }

    private void loadAllStudent() {
        studentAdminService.getAllStudents();
    }

    /** ÊêúÁ¥¢ + Â§öÈÄâÁ≠õÈÄâÂêåÊó∂ÁîüÊïà */
    private void updateFilter() {
        String keyword = searchField.getText() == null ? "" : searchField.getText().trim().toLowerCase();

        filteredData.setPredicate(s -> {
            // ÊêúÁ¥¢Êù°‰ª∂
            boolean matchKeyword = keyword.isEmpty() ||
                    (s.getStudentId() != null && s.getStudentId().toLowerCase().contains(keyword)) ||
                    (s.getName() != null && s.getName().toLowerCase().contains(keyword));

            // Âπ¥Á∫ßÁ≠õÈÄâ
            boolean matchGrade = selectedGrades.isEmpty() || selectedGrades.contains(String.valueOf(s.getGrade()));

            // ‰∏ì‰∏öÁ≠õÈÄâ
            boolean matchMajor = selectedMajors.isEmpty() || (s.getMajor() != null && selectedMajors.contains(s.getMajor()));

            // Â≠¶Á±çÁä∂ÊÄÅÁ≠õÈÄâ
            boolean matchStatus = selectedStatuses.isEmpty() ||
                    (s.getStudent_status() != null && selectedStatuses.contains(s.getStudent_status()));

            return matchKeyword && matchGrade && matchMajor && matchStatus;
        });
    }

    /** Âπ¥Á∫ßÁ≠õÈÄâÔºàÂ§öÈÄâ PopupÔºâ */
    private void addFilterToGradeColumn() {
        colGrade.setText(null);
        Button filterBtn = new Button("üîç");
        filterBtn.getStyleClass().add("filter-button");
        Popup popup = new Popup();
        popup.setAutoHide(true);

        filterBtn.setOnAction(e -> {
            if (!popup.isShowing()) {
                VBox box = new VBox(5);
                box.setStyle("-fx-background-color: white; -fx-padding: 10; -fx-border-color: gray;");

                List<String> grades = studentData.stream()
                        .map(s -> String.valueOf(s.getGrade()))
                        .distinct().sorted()
                        .collect(Collectors.toList());

                for (String g : grades) {
                    CheckBox cb = new CheckBox(g);
                    cb.setSelected(selectedGrades.contains(g));
                    cb.selectedProperty().addListener((obs, oldV, newV) -> {
                        if (newV) selectedGrades.add(g);
                        else selectedGrades.remove(g);
                        updateFilter();
                    });
                    box.getChildren().add(cb);
                }

                popup.getContent().clear();
                popup.getContent().add(box);
                popup.show(filterBtn, filterBtn.localToScreen(0, filterBtn.getHeight()).getX(),
                        filterBtn.localToScreen(0, filterBtn.getHeight()).getY());
            } else {
                popup.hide();
            }
        });

        HBox header = new HBox(3, new Label("Âπ¥Á∫ß"), filterBtn);
        header.setAlignment(Pos.CENTER);
        colGrade.setGraphic(header);
    }

    /** ‰∏ì‰∏öÁ≠õÈÄâÔºàÂ§öÈÄâ PopupÔºâ */
    private void addFilterToMajorColumn() {
        colMajor.setText(null);
        Button filterBtn = new Button("üîç");
        filterBtn.getStyleClass().add("filter-button");
        Popup popup = new Popup();
        popup.setAutoHide(true);

        filterBtn.setOnAction(e -> {
            if (!popup.isShowing()) {
                VBox box = new VBox(5);
                box.setStyle("-fx-background-color: white; -fx-padding: 10; -fx-border-color: gray;");

                List<String> majors = studentData.stream()
                        .map(Student::getMajor)
                        .filter(m -> m != null)
                        .distinct().sorted()
                        .collect(Collectors.toList());

                for (String m : majors) {
                    CheckBox cb = new CheckBox(m);
                    cb.setSelected(selectedMajors.contains(m));
                    cb.selectedProperty().addListener((obs, oldV, newV) -> {
                        if (newV) selectedMajors.add(m);
                        else selectedMajors.remove(m);
                        updateFilter();
                    });
                    box.getChildren().add(cb);
                }

                popup.getContent().clear();
                popup.getContent().add(box);
                popup.show(filterBtn, filterBtn.localToScreen(0, filterBtn.getHeight()).getX(),
                        filterBtn.localToScreen(0, filterBtn.getHeight()).getY());
            } else {
                popup.hide();
            }
        });

        HBox header = new HBox(3, new Label("‰∏ì‰∏ö"), filterBtn);
        header.setAlignment(Pos.CENTER);
        colMajor.setGraphic(header);
    }

    /** Â≠¶Á±çÁä∂ÊÄÅÁ≠õÈÄâÔºàÂ§öÈÄâ PopupÔºâ */
    private void addFilterToStudentStatusColumn() {
        colStudentStatus.setText(null);
        Button filterBtn = new Button("üîç");
        filterBtn.getStyleClass().add("filter-button");
        Popup popup = new Popup();
        popup.setAutoHide(true);

        filterBtn.setOnAction(e -> {
            if (!popup.isShowing()) {
                VBox box = new VBox(5);
                box.setStyle("-fx-background-color: white; -fx-padding: 10; -fx-border-color: gray;");

                List<String> statuses = studentData.stream()
                        .map(Student::getStudent_status)
                        .filter(st -> st != null)
                        .distinct().sorted()
                        .collect(Collectors.toList());

                for (String st : statuses) {
                    CheckBox cb = new CheckBox(st);
                    cb.setSelected(selectedStatuses.contains(st));
                    cb.selectedProperty().addListener((obs, oldV, newV) -> {
                        if (newV) selectedStatuses.add(st);
                        else selectedStatuses.remove(st);
                        updateFilter();
                    });
                    box.getChildren().add(cb);
                }

                popup.getContent().clear();
                popup.getContent().add(box);
                popup.show(filterBtn, filterBtn.localToScreen(0, filterBtn.getHeight()).getX(),
                        filterBtn.localToScreen(0, filterBtn.getHeight()).getY());
            } else {
                popup.hide();
            }
        });

        HBox header = new HBox(3, new Label("Áä∂ÊÄÅ"), filterBtn);
        header.setAlignment(Pos.CENTER);
        colStudentStatus.setGraphic(header);
    }


    /** Êü•ÁúãÂ≠¶ÁîüËØ¶ÁªÜ */
    private void showStudentDetail(Student s) {
        if (s == null) return;
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Â≠¶ÁîüËØ¶ÁªÜ‰ø°ÊÅØ");
        alert.setHeaderText("Â≠¶Âè∑Ôºö" + s.getStudentId() + " - " + s.getName());

        StringBuilder sb = new StringBuilder();
        sb.append("Áî®Êà∑ID: ").append(s.getUserId()).append("\n")
                .append("ÂßìÂêç: ").append(s.getName()).append("\n")
                .append("ÊÄßÂà´: ").append(s.getGender()).append("\n")
                .append("Â≠¶Èô¢: ").append(s.getCollege()).append("\n")
                .append("‰∏ì‰∏ö: ").append(s.getMajor()).append("\n")
                .append("Âπ¥Á∫ß: ").append(s.getGrade()).append("\n")
                .append("Âá∫ÁîüÊó•Êúü: ").append(s.getBirth_date()).append("\n")
                .append("Á±çË¥Ø: ").append(s.getNative_place()).append("\n")
                .append("ÊîøÊ≤ªÈù¢Ë≤å: ").append(s.getPolitics_status()).append("\n")
                .append("Â≠¶Á±çÁä∂ÊÄÅ: ").append(s.getStudent_status()).append("\n\n")
                .append("ËÅîÁ≥ªÊñπÂºè:\n  ÊâãÊú∫Âè∑: ").append(s.getPhone()).append("\n  ÈÇÆÁÆ±: ").append(s.getEmail())
                .append("\n  ÂÆøËàçÂú∞ÂùÄ: ").append(s.getDormAddress()).append("\n\n")
                .append("Áà∂‰∫≤‰ø°ÊÅØ:\n  ÂßìÂêç: ").append(s.getFatherName()).append("\n  ÊâãÊú∫: ").append(s.getFatherPhone())
                .append("\n  ÊîøÊ≤ªÈù¢Ë≤å: ").append(s.getFatherPoliticsStatus()).append("\n  Â∑•‰ΩúÂçï‰Ωç: ").append(s.getFatherWorkUnit())
                .append("\n\nÊØç‰∫≤‰ø°ÊÅØ:\n  ÂßìÂêç: ").append(s.getMotherName()).append("\n  ÊâãÊú∫: ").append(s.getMotherPhone())
                .append("\n  ÊîøÊ≤ªÈù¢Ë≤å: ").append(s.getMotherPoliticsStatus()).append("\n  Â∑•‰ΩúÂçï‰Ωç: ").append(s.getMotherWorkUnit());

        alert.setContentText(sb.toString());
        alert.showAndWait();
    }

    /** ‰øÆÊîπÂ≠¶Áîü‰ø°ÊÅØÂØπËØùÊ°Ü */
    private void showEditDialog(Student s) {
        if (s == null) return;
        Dialog<Student> dialog = new Dialog<>();
        dialog.setTitle("‰øÆÊîπÂ≠¶Áîü‰ø°ÊÅØ");
        dialog.setHeaderText("‰øÆÊîπÂ≠¶Áîü: " + s.getStudentId() + " - " + s.getName());

        ButtonType saveButtonType = new ButtonType("‰øùÂ≠ò", ButtonBar.ButtonData.OK_DONE);
        dialog.getDialogPane().getButtonTypes().addAll(saveButtonType, ButtonType.CANCEL);

        GridPane grid = new GridPane();
        grid.setHgap(10); grid.setVgap(10); grid.setPadding(new Insets(20, 150, 10, 10));

        TextField userIdField = new TextField(s.getUserId());
        TextField studentIdField = new TextField(s.getStudentId());
        TextField nameField = new TextField(s.getName());
        TextField genderField = new TextField(s.getGender());
        TextField collegeField = new TextField(s.getCollege());
        TextField majorField = new TextField(s.getMajor());
        TextField gradeField = new TextField(String.valueOf(s.getGrade()));
        TextField birthDateField = new TextField(s.getBirth_date());
        TextField nativePlaceField = new TextField(s.getNative_place());
        TextField politicsStatusField = new TextField(s.getPolitics_status());
        TextField studentStatusField = new TextField(s.getStudent_status());

        int row = 0;
        grid.add(new Label("Áî®Êà∑ID:"), 0, row); grid.add(userIdField, 1, row++);
        grid.add(new Label("Â≠¶Âè∑:"), 0, row); grid.add(studentIdField, 1, row++);
        grid.add(new Label("ÂßìÂêç:"), 0, row); grid.add(nameField, 1, row++);
        grid.add(new Label("ÊÄßÂà´:"), 0, row); grid.add(genderField, 1, row++);
        grid.add(new Label("Â≠¶Èô¢:"), 0, row); grid.add(collegeField, 1, row++);
        grid.add(new Label("‰∏ì‰∏ö:"), 0, row); grid.add(majorField, 1, row++);
        grid.add(new Label("Âπ¥Á∫ß:"), 0, row); grid.add(gradeField, 1, row++);
        grid.add(new Label("Âá∫ÁîüÊó•Êúü:"), 0, row); grid.add(birthDateField, 1, row++);
        grid.add(new Label("Á±çË¥Ø:"), 0, row); grid.add(nativePlaceField, 1, row++);
        grid.add(new Label("ÊîøÊ≤ªÈù¢Ë≤å:"), 0, row); grid.add(politicsStatusField, 1, row++);
        grid.add(new Label("Â≠¶Á±çÁä∂ÊÄÅ:"), 0, row); grid.add(studentStatusField, 1, row++);

        dialog.getDialogPane().setContent(grid);

        dialog.setResultConverter(dialogButton -> {
            if (dialogButton == saveButtonType) {
                s.setUserId(userIdField.getText());
                s.setStudentId(studentIdField.getText());
                s.setName(nameField.getText());
                s.setGender(genderField.getText());
                s.setCollege(collegeField.getText());
                s.setMajor(majorField.getText());
                try { s.setGrade(Integer.parseInt(gradeField.getText())); } catch (NumberFormatException ignored){}
                s.setBirth_date(birthDateField.getText());
                s.setNative_place(nativePlaceField.getText());
                s.setPolitics_status(politicsStatusField.getText());
                s.setStudent_status(studentStatusField.getText());
                return s;
            }
            return null;
        });

        dialog.showAndWait().ifPresent(updatedStudent -> {
            studentAdminService.updateStudent(updatedStudent);
            studentTable.refresh();
        });
    }

    /** Ê∂àÊÅØÂ§ÑÁêÜÊñπÊ≥ï */
    public void handleAllStudentResponse(Message message) {
        Platform.runLater(() -> {
            if (message.isSuccess() && message.getData() instanceof List<?> list) {
                studentData.clear();
                for (Object obj : list) if (obj instanceof Student s) studentData.add(s);
            } else {
                showAlert("Ëé∑ÂèñÊâÄÊúâÂ≠¶Áîü‰ø°ÊÅØÂ§±Ë¥•", message.getMessage());
            }
        });
    }

    public void handleSearchStudentResponse(Message message) {
        Platform.runLater(() -> {
            if (message.isSuccess() && message.getData() instanceof List<?> list) {
                studentData.clear();
                for (Object obj : list) if (obj instanceof Student s) studentData.add(s);
            } else showAlert("ÊêúÁ¥¢Â≠¶Áîü‰ø°ÊÅØÂ§±Ë¥•", message.getMessage());
        });
    }

    public void handleInfoStudentAdminResponse(Message message) {
        Platform.runLater(() -> {
            if (message.isSuccess() && message.getData() instanceof Student s) showStudentDetail(s);
            else showAlert("Â≠¶ÁîüËØ¶ÁªÜ‰ø°ÊÅØÊü•ËØ¢Â§±Ë¥•", message.getMessage());
        });
    }

    public void handleUpdateStudentResponse(Message message) {
        Platform.runLater(() -> {
            if (message.isSuccess()) {
                showAlert("Êõ¥Êñ∞ÊàêÂäü", message.getMessage());
                loadAllStudent();
            } else showAlert("Êõ¥Êñ∞Â§±Ë¥•", message.getMessage());
        });
    }

    @Override
    public void registerToMessageController() {
        if (studentAdminService.getGlobalSocketClient() != null &&
                studentAdminService.getGlobalSocketClient().getMessageController() != null) {
            studentAdminService.getGlobalSocketClient().getMessageController().setStudentAdminController(this);
        }
    }

    private void adjustSelectedStudentStatus() {
        // Âè™Ëé∑ÂèñÂΩìÂâçÁ≠õÈÄâÊòæÁ§∫ÁöÑÂ≠¶Áîü
        List<Student> selectedStudents = filteredData.stream()
                .filter(Student::isSelected)
                .collect(Collectors.toList());

        if (selectedStudents.isEmpty()) {
            showAlert("ÊèêÁ§∫", "ËØ∑ÂÖàÈÄâÊã©Ë¶ÅË∞ÉÊï¥ÁöÑÂ≠¶ÁîüÔºÅ");
            return;
        }

        ChoiceDialog<String> dialog = new ChoiceDialog<>("Âú®ËØª", "Âú®ËØª", "‰ºëÂ≠¶", "ÊØï‰∏ö");
        dialog.setTitle("ÊâπÈáèË∞ÉÊï¥Â≠¶Á±çÁä∂ÊÄÅ");
        dialog.setHeaderText("ËØ∑ÈÄâÊã©Êñ∞ÁöÑÂ≠¶Á±çÁä∂ÊÄÅ");
        dialog.setContentText("Â≠¶Á±çÁä∂ÊÄÅÔºö");

        dialog.showAndWait().ifPresent(status -> {
            for (Student s : selectedStudents) {
                s.setStudent_status(status);
                studentAdminService.updateStudent(s);
            }
            studentTable.refresh();
            showAlert("ÊàêÂäü", "Â∑≤Â∞Ü " + selectedStudents.size() + " ÂêçÂ≠¶ÁîüÁöÑÂ≠¶Á±çÁä∂ÊÄÅË∞ÉÊï¥‰∏∫Ôºö" + status);
        });
    }

    private void loadAllApplications() {
        studentAdminService.getAllApplications(); // ÂÅáËÆæÊúçÂä°Á´ØÊèê‰æõËé∑ÂèñÁî≥ËØ∑ÂàóË°®ÁöÑÊñπÊ≥ï
    }

    public void handleAllApplicationsResponse(Message message) {
        Platform.runLater(() -> {
            if (message.isSuccess() && message.getData() instanceof List<?> list) {
                applicationData.clear();
                for (Object obj : list) if (obj instanceof StudentLeaveApplication app) applicationData.add(app);
            } else {
                showAlert("Ëé∑ÂèñÁî≥ËØ∑ÂàóË°®Â§±Ë¥•", message.getMessage());
            }
        });
    }

    private void showAlert(String title, String msg) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(msg);
        alert.showAndWait();
    }
}
